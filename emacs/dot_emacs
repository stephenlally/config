;; no GUI
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

;; syntax highlighting on by default
(global-font-lock-mode 1)

(require 'thingatpt)

;; (add-to-list 'load-path (expand-file-name "~/elisp"))

;; blinking cursor = off
(if (fboundp 'blink-cursor-mode) (blink-cursor-mode 0))

;; turn of autobackup
(setq make-backup-files nil)

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(line-move-visual nil)
 '(indent-tabs-mode nil)
 '(iswitchb-mode t)
 '(perl-indent-level 2)
 '(transient-mark-mode (quote (only . t))))

(put 'downcase-region 'disabled nil)

(global-set-key [f2] 'other-window)
(global-set-key [f5] 'save-buffer)
(global-set-key [f6] 'string-insert-rectangle)
(global-set-key [f7] 'query-replace)

(setq compilation-ask-about-save nil)
(global-set-key [f8] 'compile)
(global-set-key "\M-z" 'zap-up-to-char)

(defun iwb ()
  "indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max)))

;; no audible bell
(setq visible-bell 1)

(setq-default c-default-style "linux"
  c-basic-offset 2
  tab-width 2
  indent-tabs-mode nil)

;; turn off pulse to screen
(setq pulse-flag nil)

(add-to-list 'auto-mode-alist '("\\.cgi\\'" . perl-mode))
(add-to-list 'auto-mode-alist '("\\.xsd\\'" . xml-mode))
(add-to-list 'auto-mode-alist '("\\.cs\\'" . java-mode))
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))

;;  highlight symbols
;; (require 'highlight-symbol)
;; (global-set-key [(control f9)] 'highlight-symbol-at-point)

(global-set-key [(control f9)] 'highlight-symbol-at-point)

(global-set-key [f12] 'multi-occur-in-all-open-buffers)
(defun multi-occur-in-all-open-buffers ()
  "Search for string in all open buffers..."
  (interactive)
  (setq toFind (read-from-minibuffer "To Find: " (thing-at-point 'word)))
  (multi-occur-in-matching-buffers ".*" toFind))

;; (load-theme 'deeper-blue t)
